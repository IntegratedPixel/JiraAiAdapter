# Jira CLI Configuration
# =====================
# Environment variables provide a complete, non-interactive setup method.
# Perfect for:
# - CI/CD pipelines
# - Enterprise environments  
# - Docker containers
# - Automated workflows
#
# ALTERNATIVE SETUP METHODS:
# 1. Environment variables (this file) - enterprise/automated use
# 2. Interactive setup: jira auth set && jira init
# 3. Config files: ~/.jirarc.json and ./.jirarc.json
#
# Copy this file to .env and customize for your environment

# Your Jira instance URL (without https://)
# Example: yourcompany.atlassian.net
JIRA_HOST=yourcompany.atlassian.net

# Your Jira email address
JIRA_EMAIL=user@example.com

# Your Jira API token (NOT your password)
# Generate at: https://id.atlassian.com/manage-profile/security/api-tokens
# Accepts either JIRA_TOKEN or JIRA_API_TOKEN
JIRA_TOKEN=your_api_token
# JIRA_API_TOKEN=your_api_token

# ===== REQUIRED FOR PROJECT OPERATIONS =====
# Default project key (e.g., PROJ, DEV, TASK)
JIRA_PROJECT=PROJ

# ===== OPTIONAL DEFAULTS =====
# Default board name for Agile/sprint commands
# JIRA_BOARD=Development Board

# Default issue type for new issues (accepts both env var formats)
# JIRA_DEFAULT_ISSUE_TYPE=Task
# JIRA_DEFAULT_TYPE=Task

# Default assignee for new issues (email, username, or "me")
# JIRA_DEFAULT_ASSIGNEE=me

# Default priority for new issues
# JIRA_DEFAULT_PRIORITY=Medium

# Default labels (comma-separated)
# JIRA_DEFAULT_LABELS=backend,api,sprint-1

# ===== USAGE EXAMPLES =====
# With these environment variables set, you can use the CLI immediately:
# 
# jira list                              # List issues in your project
# jira create --type Bug --summary "Fix login issue"
# jira batch create issues.csv          # Bulk create from CSV
# jira update PROJ-123 --story-points 5 # Update story points
#
# The CLI will automatically detect and use environment variables,
# skipping all interactive setup prompts.

# ===== CI/CD PIPELINE EXAMPLE =====
# GitHub Actions:
# env:
#   JIRA_HOST: company.atlassian.net
#   JIRA_EMAIL: ci-bot@company.com
#   JIRA_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
#   JIRA_PROJECT: PROJ
#
# GitLab CI:
# variables:
#   JIRA_HOST: "company.atlassian.net"
#   JIRA_EMAIL: "ci-bot@company.com"
#   JIRA_PROJECT: "PROJ"
# Set JIRA_TOKEN as a masked variable in GitLab settings

# ===== DOCKER EXAMPLE =====
# docker run -e JIRA_HOST=company.atlassian.net \
#            -e JIRA_EMAIL=user@company.com \
#            -e JIRA_TOKEN=xxx \
#            -e JIRA_PROJECT=PROJ \
#            your-image jira list

# =========================
# Keytar Prerequisites
# =========================
# For secure keychain storage (when NOT using environment variables):
# - macOS: Xcode Command Line Tools (xcode-select --install)  
# - Linux: libsecret-1-dev (apt-get install libsecret-1-dev)
# - Windows: No additional prerequisites
#
# Environment variables bypass keychain completely.